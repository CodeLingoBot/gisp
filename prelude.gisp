(define id (lambda (x) x))
(define not (lambda (x) (if x #f #t)))
(define false? (lambda (x) (not (true? x))))
(define zero? (lambda (x) (if (== x 0) #t (== x 0.0))))

(assert (not (not #t)))
(assert (not #f))
(assert (zero? 0))
(assert (zero? 0.0))
(assert ((lambda (x) x) #t))

(assert (true? #t))
(assert (false? #f))

(define f (lambda (x) (lambda (y) (+ x y))))

(println "success!")